(defun tstp-to-table ()
  (let ((interp (make-hash-table :test 'equal)))
  (save-excursion
    (while (re-search-forward "i(\"\\([0-9]+\\)\",\"\\([0-9]+\\)\") <=> \\$\\(.+\\)" nil t)
      (let ((a (string-to-int (match-string 1)))
	    (b (string-to-int (match-string 2)))
	    (yes-or-no (string= (match-string 3) "true")))
	; (error "R(%s,%s): %s" a b (if yes-or-no "yes" "no"))
	(puthash (cons a b) (if yes-or-no t nil) interp))))
  interp))

(defun format-relations (object other-objects table)
  (dolist (other-object other-objects)
    (if (gethash (cons object other-object) table)
	(insert "1 ")
      (insert "0 "))))

(defun format-all-relations (object vertices edges faces table)
  (format-relations object vertices table)
  (format-relations object edges table)
  (format-relations object faces table)
  (newline))

(defun format-tstp-interpretation (vertices edges faces)
  (let* ((table (tstp-to-table))
	 (total-cardinality (+ (length vertices)
			       (length edges)
			       (length faces)))
	 (num-digits (floor (1+ (log total-cardinality 10)))))
    (dolist (vertex vertices)
      (format-all-relations vertex vertices edges faces table))
    (dolist (edge edges)
      (format-all-relations edge vertices edges faces table))
    (dolist (face faces)
      (format-all-relations face vertices edges faces table))))
