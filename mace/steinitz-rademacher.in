formulas(sos).

% Setting up the language: three types of objects, one incidence relation

% Everything is either a vertex, edge, or face
all x (vertex(x) | edge(x) | face(x)).

% Non-triviality
exists x (vertex(x)).
exists x (edge(x)).
exists x (face(x)).

% The sets of vertices, edges, and faces are disjoint
all x (vertex(x) -> -edge(x)).
all x (vertex(x) -> -face(x)).
all x (edge(x) -> -face(x)).

% Symmetric incidence relation
all x all y (i(x,y) -> i(y,x)).

% No two objects of the same type are incident
all x all y ((vertex(x) & vertex(y)) -> -i(x,y)).
all x all y ((edge(x) & edge(y)) -> -i(x,y)).
all x all y ((face(x) & face(y)) -> -i(x,y)).

% "Transitivity"
all x all y all z ((vertex(x) & edge(y) & face(z) & i(x,y) & i(y,z)) -> i(x,z)).

% every edge is incident with at exactly two vertices
all x (edge(x) -> exists y exists z (y != z & vertex(y) & vertex(z) & i(y,x) & i(z,x) & all w (vertex(w) & i(w,x) -> (w = y | w = z)))).

% every edge is incident with at least two vertices
% all x (edge(x) -> exists y exists z (y != z & vertex(y) & vertex(z) & i(y,x) & i(z,x))).

% every edge is incident with at exactly two faces
all x (edge(x) -> exists y exists z (y != z & face(y) & face(z) & i(x,y) & i(x,z) & all w (face(w) & i(x,w) -> (w = y | w = z)))).

% every edge is incident with at least two faces
all x (edge(x) -> exists y exists z (y != z & face(y) & face(z) & i(x,y) & i(x,z))).

% for every vertex v and every face f such that v is incident to f, there exactly two edges that are indicent with both v and f
all v all f (vertex(v) & face(f) & i(v,f) -> exists e1 exists e2 (edge(e1) & edge(e2) & e1 != e2 & i(v,e1) & i(v,e2) & all e ((edge(e) & i(v,e) & i(e,f)) -> (e = e1 | e = e2)))).

% two faces can share at most one edge
all f1 all f2 all e1 all e2 all e3 ((face(f1) & face(f2) & f1 != f2 & edge(e1) & edge(e2) & edge(e3) & i(e1,f1) & i(e2,f1) & i(e3,f1) & i(e1,f2) & i(e2,f2) & i(e3,f2)) -> (e1 = e2 | e1 = e3 | e2 = e3)).

% every vertex is incident with something
% all v (vertex(v) -> exists x i(v,x)).
% Stronger form: every vertex is incident with an edge and a face
all v (vertex(v) -> exists e exists f (edge(e) & face(f) & i(v,e) & i(v,f))).

% every face is incident with something
% all f (face(f) -> exists x (i(x,f))).
% Stronger form: every face is incident with one edge and one vertex
all f (face(f) -> exists v exists e (vertex(v) & edge(e) & i(v,f) & i(e,f))).

% simpliciality: every face is a triangle
% all f (face(f) -> exists e1 exists e2 exists e3 (edge(e1) & edge(e2) & edge(e3) & e1 != e2 & e2 != e3 & e3 != e1 & i(e1,f) & i(e2,f) & i(e3,f) & all e ((edge(e) & i(e,f)) -> (e = e1 | e = e2 | e = e3)))).
% weakening: every face has at least three edges (rules out cases where faces have exactly two edges)
all f (face(f) -> exists e1 exists e2 exists e3 (edge(e1) & edge(e2) & edge(e3) & e1 != e2 & e2 != e3 & e1 != e3 & i(e1,f) & i(e2,f) & i(e3,f))).

% extensionality
% for vertices
all v1 all v2 ((vertex(v1) & vertex(v2) & all e (edge(e) -> (i(v1,e) <-> i(v2,e)))) -> (v1 = v2)).
all v1 all v2 ((vertex(v1) & vertex(v2) & all f (face(f) -> (i(v1,f) <-> i(v2,f)))) -> (v1 = v2)).
% for edges
all e1 all e2 ((edge(e1) & edge(e2) & all v (vertex(v) -> (i(v,e1) <-> i(v,e2)))) -> (e1 = e2)).
all e1 all e2 ((edge(e1) & edge(e2) & all f (face(f) -> (i(e1,f) <-> i(e2,f)))) -> (e1 = e2)).
% for faces
all f1 all f2 ((face(f1) & face(f2) & all v (vertex(v) -> (i(v,f1) <-> i(v,f2)))) -> (f1 = f2)).
all f1 all f2 ((face(f1) & face(f2) & all e (edge(e) -> (i(e,f1) <-> i(e,f2)))) -> (f1 = f2)).

end_of_list.
